//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MedicosRX.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HospitalManagementEntities : DbContext
    {
        public HospitalManagementEntities()
            : base("name=HospitalManagementEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Appointment> Appointments { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<DiognasisTest> DiognasisTests { get; set; }
        public virtual DbSet<Diseass> Diseasses { get; set; }
        public virtual DbSet<Doctor> Doctors { get; set; }
        public virtual DbSet<InvestigationDetail> InvestigationDetails { get; set; }
        public virtual DbSet<Medicine> Medicines { get; set; }
        public virtual DbSet<Notepad> Notepads { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<PatientType> PatientTypes { get; set; }
        public virtual DbSet<RegisterdUser> RegisterdUsers { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<GeneralPrescriptiom> GeneralPrescriptioms { get; set; }
        public virtual DbSet<SettingInfo> SettingInfoes { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TabletAndDos> TabletAndDoses { get; set; }
    
        public virtual int sp_Delete_Doctor(Nullable<int> doctorId)
        {
            var doctorIdParameter = doctorId.HasValue ?
                new ObjectParameter("DoctorId", doctorId) :
                new ObjectParameter("DoctorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Delete_Doctor", doctorIdParameter);
        }
    
        public virtual int sp_DeleteDoctorsbyid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteDoctorsbyid", idParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_get_Dissease_Result> sp_get_Dissease()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_Dissease_Result>("sp_get_Dissease");
        }
    
        public virtual ObjectResult<sp_get_Dissease_ById_Result> sp_get_Dissease_ById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_Dissease_ById_Result>("sp_get_Dissease_ById", idParameter);
        }
    
        public virtual ObjectResult<sp_get_Doctors_Result> sp_get_Doctors()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_Doctors_Result>("sp_get_Doctors");
        }
    
        public virtual ObjectResult<sp_get_Medicine_Result> sp_get_Medicine()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_Medicine_Result>("sp_get_Medicine");
        }
    
        public virtual ObjectResult<sp_getAppointment_Result> sp_getAppointment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getAppointment_Result>("sp_getAppointment");
        }
    
        public virtual ObjectResult<sp_getDoctorsbyid_Result> sp_getDoctorsbyid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getDoctorsbyid_Result>("sp_getDoctorsbyid", idParameter);
        }
    
        public virtual ObjectResult<sp_getLoginUsers_Result> sp_getLoginUsers(string userName, Nullable<int> roleId, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getLoginUsers_Result>("sp_getLoginUsers", userNameParameter, roleIdParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_Insert_Dissease(string disseaseName, string description, Nullable<int> createdBy, Nullable<int> updatedBy)
        {
            var disseaseNameParameter = disseaseName != null ?
                new ObjectParameter("DisseaseName", disseaseName) :
                new ObjectParameter("DisseaseName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_Insert_Dissease", disseaseNameParameter, descriptionParameter, createdByParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_Insert_Medicine(string medicineName, string formula, Nullable<int> disseaseId, string comment, Nullable<int> createdBy, Nullable<int> updatedBy)
        {
            var medicineNameParameter = medicineName != null ?
                new ObjectParameter("MedicineName", medicineName) :
                new ObjectParameter("MedicineName", typeof(string));
    
            var formulaParameter = formula != null ?
                new ObjectParameter("Formula", formula) :
                new ObjectParameter("Formula", typeof(string));
    
            var disseaseIdParameter = disseaseId.HasValue ?
                new ObjectParameter("DisseaseId", disseaseId) :
                new ObjectParameter("DisseaseId", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_Insert_Medicine", medicineNameParameter, formulaParameter, disseaseIdParameter, commentParameter, createdByParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_InsertDoctors(string name, string emailid, string mobileno, string gender, string specialist, Nullable<System.DateTime> date_of_joining, string qualification, string address, string timing, Nullable<int> createdBy, Nullable<int> updatedBy)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var emailidParameter = emailid != null ?
                new ObjectParameter("emailid", emailid) :
                new ObjectParameter("emailid", typeof(string));
    
            var mobilenoParameter = mobileno != null ?
                new ObjectParameter("mobileno", mobileno) :
                new ObjectParameter("mobileno", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var specialistParameter = specialist != null ?
                new ObjectParameter("specialist", specialist) :
                new ObjectParameter("specialist", typeof(string));
    
            var date_of_joiningParameter = date_of_joining.HasValue ?
                new ObjectParameter("date_of_joining", date_of_joining) :
                new ObjectParameter("date_of_joining", typeof(System.DateTime));
    
            var qualificationParameter = qualification != null ?
                new ObjectParameter("qualification", qualification) :
                new ObjectParameter("qualification", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var timingParameter = timing != null ?
                new ObjectParameter("Timing", timing) :
                new ObjectParameter("Timing", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_InsertDoctors", nameParameter, emailidParameter, mobilenoParameter, genderParameter, specialistParameter, date_of_joiningParameter, qualificationParameter, addressParameter, timingParameter, createdByParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_InsertPatient(string ptname, string mobileNo, string gender, Nullable<int> patientType, string age, string referBy, string address, Nullable<int> createdBy)
        {
            var ptnameParameter = ptname != null ?
                new ObjectParameter("Ptname", ptname) :
                new ObjectParameter("Ptname", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var patientTypeParameter = patientType.HasValue ?
                new ObjectParameter("PatientType", patientType) :
                new ObjectParameter("PatientType", typeof(int));
    
            var ageParameter = age != null ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(string));
    
            var referByParameter = referBy != null ?
                new ObjectParameter("ReferBy", referBy) :
                new ObjectParameter("ReferBy", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_InsertPatient", ptnameParameter, mobileNoParameter, genderParameter, patientTypeParameter, ageParameter, referByParameter, addressParameter, createdByParameter);
        }
    
        public virtual int sp_Update_Dissease_ById(Nullable<int> id, string disseaseName, string description, Nullable<int> createdBy, Nullable<int> updatedBy)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var disseaseNameParameter = disseaseName != null ?
                new ObjectParameter("DisseaseName", disseaseName) :
                new ObjectParameter("DisseaseName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Update_Dissease_ById", idParameter, disseaseNameParameter, descriptionParameter, createdByParameter, updatedByParameter);
        }
    
        public virtual int sp_Update_Doctors(string name, string emailid, string mobileno, string gender, string specialist, Nullable<System.DateTime> date_of_joining, string qualification, string address, string timing, Nullable<int> createdBy, Nullable<int> updatedBy, Nullable<int> doctorID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var emailidParameter = emailid != null ?
                new ObjectParameter("emailid", emailid) :
                new ObjectParameter("emailid", typeof(string));
    
            var mobilenoParameter = mobileno != null ?
                new ObjectParameter("mobileno", mobileno) :
                new ObjectParameter("mobileno", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var specialistParameter = specialist != null ?
                new ObjectParameter("specialist", specialist) :
                new ObjectParameter("specialist", typeof(string));
    
            var date_of_joiningParameter = date_of_joining.HasValue ?
                new ObjectParameter("date_of_joining", date_of_joining) :
                new ObjectParameter("date_of_joining", typeof(System.DateTime));
    
            var qualificationParameter = qualification != null ?
                new ObjectParameter("qualification", qualification) :
                new ObjectParameter("qualification", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var timingParameter = timing != null ?
                new ObjectParameter("Timing", timing) :
                new ObjectParameter("Timing", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Update_Doctors", nameParameter, emailidParameter, mobilenoParameter, genderParameter, specialistParameter, date_of_joiningParameter, qualificationParameter, addressParameter, timingParameter, createdByParameter, updatedByParameter, doctorIDParameter);
        }
    
        public virtual int sp_UpdateDoctors(Nullable<int> id, string name, string emailId, string mobileNo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateDoctors", idParameter, nameParameter, emailIdParameter, mobileNoParameter);
        }
    
        public virtual ObjectResult<getNotepadbyId_Result> getNotepadbyId(Nullable<int> topicId)
        {
            var topicIdParameter = topicId.HasValue ?
                new ObjectParameter("TopicId", topicId) :
                new ObjectParameter("TopicId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getNotepadbyId_Result>("getNotepadbyId", topicIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_CreateAppointment(Nullable<int> drId, Nullable<int> patId, Nullable<double> totalAmount, string timeAppoint, Nullable<int> createdBy)
        {
            var drIdParameter = drId.HasValue ?
                new ObjectParameter("DrId", drId) :
                new ObjectParameter("DrId", typeof(int));
    
            var patIdParameter = patId.HasValue ?
                new ObjectParameter("PatId", patId) :
                new ObjectParameter("PatId", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(double));
    
            var timeAppointParameter = timeAppoint != null ?
                new ObjectParameter("timeAppoint", timeAppoint) :
                new ObjectParameter("timeAppoint", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_CreateAppointment", drIdParameter, patIdParameter, totalAmountParameter, timeAppointParameter, createdByParameter);
        }
    
        public virtual ObjectResult<sp_get_CountPatientByDrId_Result> sp_get_CountPatientByDrId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_CountPatientByDrId_Result>("sp_get_CountPatientByDrId");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_get_Dashboard_Detail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_get_Dashboard_Detail");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_get_Dashboard_GetCountAppointmentByDRId(Nullable<int> drid, string fromdate, string todate)
        {
            var dridParameter = drid.HasValue ?
                new ObjectParameter("Drid", drid) :
                new ObjectParameter("Drid", typeof(int));
    
            var fromdateParameter = fromdate != null ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(string));
    
            var todateParameter = todate != null ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_get_Dashboard_GetCountAppointmentByDRId", dridParameter, fromdateParameter, todateParameter);
        }
    }
}
